
" => General 

let mapleader = ","

" Sets how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * checktime

" :W sudo saves the file
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

" !vi
set nocompatible


" => VIM user interface
" Doesnt show what is the current mode
set noshowmode

" Show key pressed on normal mode
set showcmd

" only used to highlight CursorLineNr correctly
set cursorline

" Show the number of the current line
set number

" Show number of lines in relative mode
set relativenumber

" Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Turn on the Wild menu
set wildmenu

" How many tenths of a second to blink when matching brackets
set mat=2


" => Colors and Fonts

" Enable syntax highlighting
syntax enable

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" colorsheme
let g:jellybeans_overrides = {
\   'Pmenu'       : { 'guifg': 'CCCCCC', 'guibg': '222727' },
\   'PmenuSel'    : { 'guifg': 'EEEEEE', 'guibg': '303030', 'attr': 'bold' },
\   'CursorLineNr': { 'attr': 'bold' },
\   'Search':       { 'guifg': 'D4538A', 'guibg': '131313' },
\   'SpellBad':     { 'guifg': '902020', 'guibg': '131313', 'attr': 'bold,underline' },
\   'SpellCap':     { 'guifg': '0000Df', 'guibg': '131313', 'attr': 'bold,underline' },
\   'SpellRare':    { 'guifg': '540063', 'guibg': '131313', 'attr': 'bold,underline' },
\   'SpellLocal':   { 'guifg': '2D7067', 'guibg': '131313', 'attr': 'bold,underline' },
\}

colorscheme jellybeans

" Change colorscheme sh default colors.
hi! link shQuote shDoubleQuote
hi! link shCommandSub shFunctionOne
hi! link shOption shVar
hi! link shTestOpr shOption


" => Files, backups and undo

" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb 
set noswapfile


" => Text, tab and indent related

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" => Keybinds 

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <C-space> ?

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Only Ctrl doesnt work. You will need to press Ctrl+Alt
map <C-j> <S-}>
map <C-k> <S-{>

" Disable highlight when <leader>l is pressed
map <silent> <leader>l :let @/=""<cr>

" Shows the highlight-group name of the current selected token
nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


" => Status line
" todo: change the color of the mode letter depending on what mode we are.

" Always show the status line.
set laststatus=2

set statusline=
set statusline+=%#PmenuSel#\ %{mode()}\ %#LineNr#\%#Pmenu#\ %F\ %m "left side

" todo: fix StatuslineGit():
    " calls to the system method shows weird output when scrolling. I
    " tried using :silent attribute ( as it says on the help page ), but
    " my cursor started going really slow. I will need to test in my
    " another computer to see if its really a performance issue or
    " something else.
" set statusline+=%=%{StatuslineGit()}\%#Pmenu#\ %p%%\ (%l:%c/%L)\ %#PmenuSel#\ %{strftime('%H:%M')}\ %#LineNr# "right side

set statusline+=%=%#Pmenu#\ %p%%\ (%l:%c/%L)\ %#PmenuSel#\ %{strftime('%H:%M')}\ %#LineNr# "right side


" => Autocommands 

" Delete trailing white space on save.
autocmd FileType txt,c,cpp,cs,java,lua,py autocmd BufWritePre <buffer> %s/\s\+$//e

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" => Helper functions

" Shows the name of the current branch.
" function! StatuslineGit()
    " let l:branchname = system("git rev-parse --abbrev-ref HEAD 2>/dev/null")
    " return strlen(l:branchname) > 0?' '.l:branchname.' ':''
" endfunction
